package com.example.demo.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Aspect
@Component
public class LoggingAspect {

	@Before("execute(String com.example.demo.controller.HomeController.showList(..))")
	
	public void startLog(JoinPoint jp) {
		log.info("{}:Before処理",jp.getSignature());
	}
	
	@After("execute(String com.example.demo.controller.HomeController.*(..))")
	public void endLog(JoinPoint jp) {
		log.info("{}:Before処理",jp.getSignature());
	}
	
	@Around("execute(String com.example.demo.*(..))")
	public void startAndEndLog(ProceedingJoinPoint pjp) throws Throwable {
		log.info("{}:Around前処理",pjp.getSignature());
		
		var result = pjp.proceed();
		
		log.info("{}:Around後処理",pjp.getSignature());
		
		return result;
	}
}
